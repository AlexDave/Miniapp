import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { BrowserRouter as Router, Route, Routes, Link, useParams } from 'react-router-dom';
import './App.css';

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫—É—Ä—Å–æ–≤
function Courses() {
  const [courses, setCourses] = useState([]);

  useEffect(() => {
    async function fetchCourses() {
      try {
        const response = await axios.get('http://localhost:5000/api/courses');
        setCourses(response.data);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫—É—Ä—Å–æ–≤:', error);
      }
    }

    fetchCourses();
  }, []);

  return (
    <div>
      <h2>–ö—É—Ä—Å—ã</h2>
      <ul>
        {courses && courses.length > 0 ? (
          courses.map(course => (
            <li key={course.id}>
              <Link to={`/course/${course.id}`}>
                <h3>{course.title}</h3>
                <p>{course.description}</p>
              </Link>
            </li>
          ))
        ) : (
          <p>–ö—É—Ä—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞...</p>
        )}
      </ul>
    </div>
  );
  
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—É—Ä—Å–µ
function CourseDetail() {
  const { id } = useParams();
  const [course, setCourse] = useState(null);

  useEffect(() => {
    async function fetchCourse() {
      try {
        const response = await axios.get(`http://localhost:5000/api/courses/${id}`);
        setCourse(response.data);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫—É—Ä—Å–∞:', error);
      }
    }

    fetchCourse();
  }, [id]);

  const handleAddTrackToTracks = async (track) => {
    try {
      const response = await axios.post(`http://localhost:5000/api/tracks`, {
        track,
        courseId: course.id,
      });
      alert('–¢—Ä–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω!');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–∫–∞:', error);
    }
  };

  return (
    <div>
      {course ? (
        <>
          <h2>{course.title}</h2>
          <iframe
            width="560"
            height="315"
            src={course.videoUrl}
            title={course.title}
            frameBorder="0"
            allowFullScreen
          ></iframe>
          <p>{course.content}</p>
  
          <div>
            <h3>–¢—Ä–µ–∫–∏ –∫—É—Ä—Å–∞</h3>
            <ul>
              {course.tracks && course.tracks.length > 0 ? (
                course.tracks.map(track => (
                  <li key={track.id}>
                    <h4>{track.title}</h4>
                    <p>{track.description}</p>
                    <button onClick={() => handleAddTrackToTracks(track)}>
                      –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–∫ –≤ —Å–ø–∏—Å–æ–∫
                    </button>
                  </li>
                ))
              ) : (
                <p>–¢—Ä–µ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞...</p>
              )}
            </ul>
          </div>
        </>
      ) : (
        <p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>
      )}
    </div>
  );
  
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç—Ä–µ–∫–æ–≤
function Tracks() {
  const [tracks, setTracks] = useState([]);

  useEffect(() => {
    async function fetchTracks() {
      try {
        const response = await axios.get('http://localhost:5000/api/tracks');
        setTracks(response.data);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç—Ä–µ–∫–æ–≤:', error);
      }
    }

    fetchTracks();
  }, []);

  const updateProgress = async (trackId, progress) => {
    try {
      const completed = progress >= 100; // –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º, –µ—Å–ª–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–æ—Å—Ç–∏–≥ 100%
      await axios.put(`http://localhost:5000/api/tracks/${trackId}`, { progress, completed });

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–æ–≤ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
      const updatedTracks = await axios.get('http://localhost:5000/api/tracks');
      setTracks(updatedTracks.data);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ç—Ä–µ–∫–∞:', error);
    }
  };

  return (
    <div>
      <h2>–ú–æ–∏ —Ç—Ä–µ–∫–∏</h2>
      <ul>
        {tracks && tracks.length > 0 ? (
          tracks.map(track => (
            <li key={track.id} className={track.completed ? 'completed' : ''}>
              <h4>{track.title}</h4>
              <progress value={track.progress} max="100"></progress>
              <p>{track.progress}%</p>
  
              {!track.completed ? (
                <>
                  <button onClick={() => updateProgress(track.id, track.progress + 10)}>
                    –£–≤–µ–ª–∏—á–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
                  </button>
                  <p>{track.progress < 100 ? '–¢—Ä–µ–∫ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ' : '–¢—Ä–µ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω!'}</p>
                </>
              ) : (
                <p>–¢—Ä–µ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω!</p>
              )}
            </li>
          ))
        ) : (
          <p>–¢—Ä–µ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞...</p>
        )}
      </ul>
    </div>
  );
  
}

function App() {
  return (
    <Router>
      <div className="App">
        <header className="App-header">
          <h1>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Mini App</h1>
          <nav>
            <Link to="/courses">üìö –ö—É—Ä—Å—ã</Link>
            <Link to="/tracks">üìÖ –¢—Ä–µ–∫–∏</Link>
            <Link to="/chat">üí¨ –ß–∞—Ç</Link>
            <Link to="/profile">‚öôÔ∏è –ü—Ä–æ—Ñ–∏–ª—å</Link>
          </nav>
        </header>

        <main>
          <Routes>
            <Route path="/" element={<Courses />} />
            <Route path="/courses" element={<Courses />} />
            <Route path="/course/:id" element={<CourseDetail />} />
            <Route path="/tracks" element={<Tracks />} />
            <Route path="/chat" element={<div>–ß–∞—Ç —Å –∫–∏–Ω–æ–ª–æ–≥–æ–º</div>} />
            <Route path="/profile" element={<div>–ü—Ä–æ—Ñ–∏–ª—å</div>} />
            <Route path="*" element={<div>–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</div>} />
          </Routes>
        </main>
      </div>
    </Router>
  );
}

export default App;
